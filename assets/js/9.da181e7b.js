(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{325:function(t,v,a){"use strict";a.r(v);var _=a(8),r=Object(_.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"javascript-实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#javascript-实现"}},[t._v("#")]),t._v(" "),v("code",[t._v("JavaScript")]),t._v(" 实现")]),t._v(" "),v("p",[t._v("完整的 "),v("code",[t._v("JavaScript")]),t._v(" 实现由以下三个部分组成：")]),t._v(" "),v("ul",[v("li",[t._v("核心（ECMAScript）")]),t._v(" "),v("li",[t._v("文档对象模型（DOM）")]),t._v(" "),v("li",[t._v("浏览器对象模型（BOM）")])]),t._v(" "),v("p",[t._v("ECMA-262 定义的语言包含以下部分")]),t._v(" "),v("ul",[v("li",[t._v("语法")]),t._v(" "),v("li",[t._v("类型")]),t._v(" "),v("li",[t._v("语句")]),t._v(" "),v("li",[t._v("关键字")]),t._v(" "),v("li",[t._v("保留字")]),t._v(" "),v("li",[t._v("操作符")]),t._v(" "),v("li",[t._v("全局对象")])]),t._v(" "),v("h2",{attrs:{id:"ecmascript"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript"}},[t._v("#")]),t._v(" ECMAScript")]),t._v(" "),v("h3",{attrs:{id:"es6-更新"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#es6-更新"}},[t._v("#")]),t._v(" ES6 更新")]),t._v(" "),v("p",[t._v("ECMA-262 第6 版，俗称ES6、ES2015 或ES  Harmony（和谐版），于2015 年6 月发布。这一版包含了大概这个规范有史以来最重要的一批增强特性。ES6 正式支持了类、模块、迭代器、生成器、箭头函数、期约、反射、代理和众多新的数据类型。")]),t._v(" "),v("h3",{attrs:{id:"es8-更新"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#es8-更新"}},[t._v("#")]),t._v(" ES8 更新")]),t._v(" "),v("p",[t._v("ECMA-262 第8 版，也称为ES8、ES2017，完成于2017 年6 月。这一版主要增加了异步函数（async/ await）、SharedArrayBuffer 及Atomics API，以及Object.values()/Object.entries()/Object. getOwnPropertyDescriptors()和字符串填充方法，另外明确支持对象字面量最后的逗号。")]),t._v(" "),v("h3",{attrs:{id:"es-符合性与-typescript"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#es-符合性与-typescript"}},[t._v("#")]),t._v(" ES 符合性与 TypeScript")]),t._v(" "),v("p",[v("code",[t._v("ECMAScript")]),t._v(" 是 "),v("code",[t._v("JavaScript")]),t._v(" 的标准，而 "),v("code",[t._v("TypeScript")]),t._v(" 是 "),v("code",[t._v("JavaScript")]),t._v(" 的超集，它为 "),v("code",[t._v("JavaScript")]),t._v(" 添加了可选的静态类型和基于类的面向对象编程。")]),t._v(" "),v("p",[t._v("支持ECMA-262 中描述的所有“类型、值、对象、属性、函数，以及程序语法与语义”；")]),t._v(" "),v("p",[t._v("支持Unicode 字符标准。")]),t._v(" "),v("p",[t._v("此外，符合性实现还可以满足下列要求。")]),t._v(" "),v("p",[t._v("增加ECMA-262 中未提及的“额外的类型、值、对象、属性和函数”。ECMA-262 所说的这些额外内容主要指规范中未给出的新对象或对象的新属性。 支持ECMA-262 中没有定义的“程序和正则表达式语法”（意思是允许修改和扩展内置的正则表达式特性）。")]),t._v(" "),v("h2",{attrs:{id:"dom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[t._v("#")]),t._v(" DOM")]),t._v(" "),v("p",[t._v("文档对象模型（DOM，Document Object Model）是一个应用编程接口（API），用于在HTML 中使用扩展的XML。")]),t._v(" "),v("h2",{attrs:{id:"bom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#bom"}},[t._v("#")]),t._v(" BOM")]),t._v(" "),v("p",[t._v("IE3 和Netscape Navigator 3 提供了浏览器对象模型（BOM） API，用于支持访问和操作浏览器的窗口。使用BOM，开发者可以操控浏览器显示页面之外的部分。而BOM 真正独一无二的地方，当然也是问题最多的地方，就是它是唯一一个没有相关标准的JavaScript 实现。HTML5 改变了这个局面，这个版本的 HTML 以正式规范的形式涵盖了尽可能多的 BOM 特性。由于 HTML5 的出现，之前很多与 BOM有关的问题都迎刃而解了。 总体来说，BOM 主要针对浏览器窗口和子窗口（frame），不过人们通常会把任何特定于浏览器的扩展都归在BOM 的范畴内。")])])}),[],!1,null,null,null);v.default=r.exports}}]);